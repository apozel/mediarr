services:
  jellyfin:
    image: jellyfin/jellyfin
    container_name: jellyfin
    user: 1000:1000
    # network_mode: 'host'
    volumes:
      - ./config/jellyfin/config:/config
      - ./config/jellyfin/cache:/cache
      - /media/apozel/hardDisk/Movies:/movies
      - /media/apozel/hardDisk/Shows:/tvshows
    restart: 'unless-stopped'
    # Optional - alternative address used for autodiscovery
    environment:
      - JELLYFIN_PublishedServerUrl=https://jellyfin.westbay.fr
    # Optional - may be necessary for docker healthcheck to pass if running in host network mode
    # extra_hosts:
    #   - 'host.docker.internal:host-gateway'
    ports:
      - 1900:1900/udp 
      - 7359:7359/udp

  sonarr:
    image: linuxserver/sonarr
    container_name: sonarr
    restart: unless-stopped
    depends_on:
      - qbittorrent
    volumes:
      - ./config/sonarr/config:/config
      - ./config/qbittorrent/downloads:/downloads
      - /media/apozel/hardDisk/Shows:/tv
    environment:
      - TZ=Europe/Paris
      - PUID=1000
      - PGID=1000

  radarr:
    image: linuxserver/radarr
    container_name: radarr
    depends_on:
      - qbittorrent
    volumes:
      - ./config/radarr/config:/config
      - ./config/qbittorrent/downloads:/downloads
      - /media/apozel/hardDisk/Movies:/movies
    restart: unless-stopped
    environment:
      - TZ=Europe/Paris
      - PUID=1000
      - PGID=1000
  
  bazarr:
    image: lscr.io/linuxserver/bazarr:latest
    container_name: bazarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Paris
    volumes:
      - ./config/bazarr/config:/config
      - /media/apozel/hardDisk/Movies:/movies
      - /media/apozel/hardDisk/Shows:/tvshows
    restart: unless-stopped

  overseerr:
    image: sctx/overseerr:latest
    container_name: overseerr
    restart: unless-stopped
    environment:
      - LOG_LEVEL=info
      - TZ=Europe/Paris
    volumes:
      - ./config/overseerr/config:/app/config

  prowlarr:
    image: lscr.io/linuxserver/prowlarr:latest
    container_name: prowlarr
    restart: unless-stopped
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Etc/UTC
    volumes:
      - ./config/prowlarr:/config

  qbittorrent:
    image: ghcr.io/linuxserver/qbittorrent
    container_name: qbittorrent
    dns: 8.8.8.8
    restart: unless-stopped
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Paris
      - WEBUI_PORT=8080
      - TORRENTING_PORT=6881
    volumes:
      - ./config/qbittorrent/config:/config
      - ./config/qbittorrent/downloads:/downloads
    ports:
      - 6881:6881
      - 6881:6881/udp

  flaresolverr:
    # DockerHub mirror flaresolverr/flaresolverr:latest
    image: ghcr.io/flaresolverr/flaresolverr:latest
    container_name: flaresolverr
    restart: unless-stopped
    environment:
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - LOG_HTML=${LOG_HTML:-false}
      - CAPTCHA_SOLVER=${CAPTCHA_SOLVER:-none}
      - TZ=Europe/Paris
    ports:
      - "${PORT:-8191}:8191"

  nginx:
    container_name: nginx
    image: nginx:mainline-alpine
    restart: unless-stopped
    volumes:
    - ./reverse-proxy/:/etc/nginx/conf.d/:ro
    - letsencrypt-jellyfin:/etc/letsencrypt
    ports:
    - "80:80"
    - "443:443"

  # diun:
  #   image: crazymax/diun:latest
  #   container_name: diun
  #   command: serve
  #   volumes:
  #     - "./data:/data"
  #     - "/var/run/docker.sock:/var/run/docker.sock"
  #   environment:
  #     - "TZ=Europe/Paris"
  #     - "LOG_LEVEL=info"
  #     - "LOG_JSON=false"
  #     - "DIUN_WATCH_WORKERS=20"
  #     - "DIUN_WATCH_SCHEDULE=0 */6 * * *"
  #     - "DIUN_WATCH_JITTER=30s"
  #     - "DIUN_PROVIDERS_DOCKER=true"
  #     - "DIUN_PROVIDERS_DOCKER_WATCHBYDEFAULT=true"
  #   restart: always

volumes:
  letsencrypt-jellyfin:
    external: true